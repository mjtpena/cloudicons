@page "/iconlist/{Tab}"
@using System.Globalization;
@using System.Text.RegularExpressions;
@inject IJSRuntime JSRuntime

<div class="search-container">
    <input type="text" @bind="searchTerm" @onkeydown="@(e => HandleKeyDown(e))" placeholder="Database" />
    <button class="search-button" @onclick="Search">Search</button>
</div>



<div>
    <input type="checkbox" id="downloadAsPng" @bind="DownloadAsPng" />
    <label for="downloadAsPng">Download as PNG</label>
</div>

<div class="svg-grid">
    @{
        var index = 0;
    }
    @if (filteredSvgs.Count > 0)
    {
        @foreach (var svg in filteredSvgs)
        {
            <div class="svg-item-wrapper">
                <div class="svg-item">
                    @if (DownloadAsPng)
                    {
                        var svgId = $"mySvg{index++}";
                        <a @onclick="() => OnDownloadRequested(svgId)">
                            <img id="@svgId" src="@svg.Path" alt="@svg.Name" style="min-width:180px;" />
                        </a>
                    }
                    else
                    {
                        <a href="@svg.Path" download="@svg.Name">
                            <img id="mySvg" src="@svg.Path" alt="@svg.Name" style="min-width:180px;" />
                        </a>
                    }
                </div>
                <p>@(svg.Name.Length > 32 ? svg.Name.Substring(0, 32) + "..." : svg.Name)</p>
            </div>
        }
    }
    else
    {
        <p>No results found</p>
    }
</div>

<button @onclick="LoadMore" style="display: @(hasMoreToLoad ? "block" : "none")">Load More</button>


@code {
    [Parameter] public string Tab { get; set; } = string.Empty;

    private string searchTerm = string.Empty;
    private List<SvgFile> svgs = new List<SvgFile>();
    private List<SvgFile> filteredSvgs = new List<SvgFile>();
    private int loadCount = 20;
    private bool hasMoreToLoad = true;
    private bool DownloadAsPng { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        svgs.Clear();
        await LoadSvgs();
    }

    private async Task LoadSvgs(string searchTerm = null)
    {
        var svgFiles = Directory.EnumerateFiles($"wwwroot/icons/{Tab}", "*.svg", SearchOption.AllDirectories);

        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            svgFiles = svgFiles.Where(file => file.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        }

        svgFiles = svgFiles.Skip(svgs.Count).Take(loadCount);

        var loadTasks = svgFiles.Select(async svgFile =>
        {
        var fileName = Path.GetFileNameWithoutExtension(svgFile);
        var match = Regex.Match(fileName, @"^\d{5}-icon-service-(.+)$");

        var humanReadableName = (match.Success ? match.Groups[1].Value.Replace("-", " ") : fileName.Replace("-", " "))
            .Replace("_", " ");

        humanReadableName = Regex.Replace(humanReadableName, "_48_(Regular|Color)$", string.Empty, RegexOptions.IgnoreCase);
        humanReadableName = Regex.Replace(humanReadableName, @"\d+$", string.Empty).Trim();

        humanReadableName = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(humanReadableName);

        return new SvgFile { Path = svgFile.Replace("wwwroot", ""), Name = humanReadableName };
        });

        var newSvgs = await Task.WhenAll(loadTasks);

        hasMoreToLoad = newSvgs.Length == loadCount;

        svgs.AddRange(newSvgs);
        filteredSvgs = svgs;
    }

    async void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Search();
        }
    }

    private async Task Search()
    {
        svgs.Clear();
        await LoadSvgs(searchTerm);
        StateHasChanged();
    }

    private async Task LoadMore()
    {
        await LoadSvgs(searchTerm);
    }

    private async Task OnDownloadRequested(string svgId)
    {
        if (DownloadAsPng)
        {
            await StartDownloadAsPng(svgId);
        }
    }

    private async Task StartDownloadAsPng(string svgId)
    {
        await JSRuntime.InvokeVoidAsync("downloadAsPng", svgId);
    }

    private class SvgFile
    {
        public string Path { get; set; }
        public string Name { get; set; }
    }
}
