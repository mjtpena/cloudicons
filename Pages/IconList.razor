@page "/iconlist/{Tab}"
@using System.Globalization;
@using System.Text.RegularExpressions;
@inject IJSRuntime JSRuntime

<div class="search-container">
    <input type="text" @bind="searchTerm" @bind:event="oninput" @onkeyup="SearchDebounced" placeholder="Search icons..." />
</div>

<div>
    <input type="checkbox" id="downloadAsPng" @bind="DownloadAsPng" />
    <label for="downloadAsPng">Download as PNG</label>
</div>

<div class="svg-grid">
    @if (filteredSvgs.Count > 0)
    {
        @foreach (var svg in filteredSvgs)
        {
            var safeId = GenerateSafeId(svg.Name);
            <div class="svg-item-wrapper">
                <div class="svg-item">
                    @if (DownloadAsPng)
                    {
                        <a @onclick="() => OnDownloadRequested(safeId, svg.Name)">
                            <img id="@safeId" src="@svg.Path" alt="@svg.Name" style="min-width:180px;" />
                        </a>
                    }
                    else
                    {
                        <a href="@svg.Path" download="@svg.Name">
                            <img src="@svg.Path" alt="@svg.Name" style="min-width:180px;" />
                        </a>
                    }
                </div>
                <p>@(svg.Name.Length > 32 ? svg.Name.Substring(0, 32) + "..." : svg.Name)</p>
            </div>
        }
    }
    else
    {
        <p>No results found</p>
    }
</div>

<button @onclick="LoadMore" style="display: @(hasMoreToLoad ? "block" : "none")">Load More</button>

@code {
    [Parameter] public string Tab { get; set; } = string.Empty;

    private string searchTerm = string.Empty;
    private List<SvgFile> filteredSvgs = new List<SvgFile>();
    private int currentPage = 1;
    private int pageSize = 20;
    private bool hasMoreToLoad = true;
    private bool DownloadAsPng { get; set; }
    private System.Timers.Timer debounceTimer;

    protected override async Task OnInitializedAsync()
    {
        debounceTimer = new System.Timers.Timer(300);
        debounceTimer.Elapsed += async (sender, e) => await SearchDebounceElapsed();
        debounceTimer.AutoReset = false;

        await LoadSvgs();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (currentPage != 1 || !string.IsNullOrEmpty(searchTerm))
        {
            currentPage = 1;
            searchTerm = string.Empty;
            await LoadSvgs();
        }
    }

    private async Task LoadSvgs()
    {
        var svgFiles = await SearchSvgsAsync(searchTerm, currentPage, pageSize);
        
        hasMoreToLoad = svgFiles.Count == pageSize;

        if (currentPage == 1)
        {
            filteredSvgs = svgFiles;
        }
        else
        {
            filteredSvgs.AddRange(svgFiles);
        }

        StateHasChanged();
    }

    private async Task<List<SvgFile>> SearchSvgsAsync(string searchTerm, int page, int pageSize)
    {
        // This method should be implemented on the server-side
        // For now, we'll simulate it client-side
        var allSvgFiles = Directory.EnumerateFiles($"wwwroot/icons/{Tab}", "*.svg", SearchOption.AllDirectories);
        
        var query = allSvgFiles.AsEnumerable();

        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            query = query.Where(file => Path.GetFileNameWithoutExtension(file)
                .Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        }

        var paginatedFiles = query
            .Skip((page - 1) * pageSize)
            .Take(pageSize)
            .ToList();

        var result = new List<SvgFile>();

        foreach (var svgFile in paginatedFiles)
        {
            var fileName = Path.GetFileNameWithoutExtension(svgFile);
            var match = Regex.Match(fileName, @"^\d{5}-icon-service-(.+)$");

            var humanReadableName = (match.Success ? match.Groups[1].Value.Replace("-", " ") : fileName.Replace("-", " "))
                .Replace("_", " ");

            humanReadableName = Regex.Replace(humanReadableName, "_48_(Regular|Color)$", string.Empty, RegexOptions.IgnoreCase);
            humanReadableName = Regex.Replace(humanReadableName, @"\d+$", string.Empty).Trim();

            humanReadableName = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(humanReadableName);

            result.Add(new SvgFile { Path = svgFile.Replace("wwwroot", ""), Name = humanReadableName });
        }

        return result;
    }

    private void SearchDebounced()
    {
        debounceTimer.Stop();
        debounceTimer.Start();
    }

    private async Task SearchDebounceElapsed()
    {
        await InvokeAsync(async () =>
        {
            currentPage = 1;
            await LoadSvgs();
            StateHasChanged();
        });
    }

    private async Task LoadMore()
    {
        currentPage++;
        await LoadSvgs();
    }

    private string GenerateSafeId(string name)
    {
        // Remove any non-alphanumeric characters and replace spaces with underscores
        return "svg_" + Regex.Replace(name, @"[^a-zA-Z0-9]+", "_");
    }

    private async Task OnDownloadRequested(string safeId, string fileName)
    {
        if (DownloadAsPng)
        {
            await JSRuntime.InvokeVoidAsync("downloadAsPng", safeId, fileName);
        }
    }

    private class SvgFile
    {
        public string Path { get; set; }
        public string Name { get; set; }
    }
}